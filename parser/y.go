// Code generated by goyacc -o y.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import "fmt"

//line parser.y:8
type yySymType struct {
	yys int
	val any
}

const String = 57346
const Number = 57347
const Print = 57348
const Label = 57349
const Type = 57350
const Get = 57351
const Put = 57352
const Post = 57353
const Delete = 57354
const Head = 57355
const Header = 57356
const Body = 57357
const Json = 57358
const JsonStr = 57359
const Comment = 57360
const Bool = 57361
const Write = 57362
const Append = 57363
const StringFunc = 57364
const CodeBlock = 57365
const If = 57366
const For = 57367
const Read = 57368
const Map = 57369
const Len = 57370
const ForEach = 57371

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"String",
	"Number",
	"Print",
	"Label",
	"Type",
	"Get",
	"Put",
	"Post",
	"Delete",
	"Head",
	"Header",
	"Body",
	"Json",
	"JsonStr",
	"Comment",
	"Bool",
	"Write",
	"Append",
	"StringFunc",
	"CodeBlock",
	"If",
	"For",
	"Read",
	"Map",
	"Len",
	"ForEach",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"')'",
	"','",
	"'.'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	31, 57,
	32, 57,
	33, 57,
	34, 57,
	-2, 19,
	-1, 8,
	31, 60,
	32, 60,
	33, 60,
	34, 60,
	-2, 12,
	-1, 12,
	31, 58,
	32, 58,
	33, 58,
	34, 58,
	-2, 10,
	-1, 15,
	31, 62,
	32, 62,
	33, 62,
	34, 62,
	-2, 14,
	-1, 20,
	31, 56,
	32, 56,
	33, 56,
	34, 56,
	-2, 20,
	-1, 21,
	31, 55,
	32, 55,
	33, 55,
	34, 55,
	-2, 21,
	-1, 22,
	31, 59,
	32, 59,
	33, 59,
	34, 59,
	-2, 22,
}

const yyPrivate = 57344

const yyLast = 263

var yyAct = [...]uint8{
	79, 85, 8, 8, 109, 40, 6, 179, 154, 178,
	37, 13, 93, 108, 83, 12, 12, 190, 88, 49,
	189, 174, 47, 49, 173, 171, 47, 49, 170, 169,
	47, 49, 25, 168, 49, 47, 66, 69, 72, 147,
	146, 49, 47, 167, 94, 48, 46, 47, 133, 90,
	89, 132, 98, 49, 47, 166, 100, 95, 78, 165,
	92, 102, 99, 49, 163, 101, 47, 117, 115, 124,
	122, 111, 112, 113, 114, 135, 130, 138, 141, 77,
	129, 91, 127, 125, 162, 104, 105, 106, 107, 161,
	196, 49, 195, 39, 194, 47, 142, 49, 47, 52,
	53, 54, 55, 193, 131, 192, 191, 188, 172, 164,
	152, 151, 150, 153, 149, 148, 153, 153, 153, 153,
	157, 158, 159, 160, 145, 20, 21, 136, 96, 70,
	26, 27, 28, 29, 30, 54, 55, 128, 44, 76,
	22, 75, 74, 41, 177, 73, 63, 32, 42, 43,
	62, 61, 51, 50, 126, 110, 181, 97, 20, 21,
	23, 7, 24, 26, 27, 28, 29, 30, 137, 110,
	155, 44, 5, 22, 31, 33, 41, 134, 34, 35,
	32, 42, 43, 36, 81, 80, 67, 82, 68, 26,
	27, 28, 29, 30, 103, 71, 87, 44, 64, 84,
	81, 80, 41, 82, 144, 143, 32, 42, 43, 43,
	65, 175, 187, 44, 176, 84, 118, 119, 41, 123,
	180, 186, 32, 42, 43, 118, 119, 139, 116, 44,
	140, 120, 87, 185, 184, 183, 182, 156, 44, 121,
	120, 60, 59, 58, 57, 56, 86, 15, 15, 2,
	38, 45, 19, 18, 17, 16, 14, 11, 10, 9,
	4, 3, 1,
}

var yyPact = [...]int16{
	154, 154, -1000, -1000, -1000, -1000, -1000, 16, 15, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 118, 117, 68, 241, 240, 239, 238,
	237, 116, 115, 111, 191, 181, 188, -1000, -1000, -1000,
	-1000, 110, 107, 106, 104, -1000, 180, 11, 180, 5,
	121, 187, 196, 196, 196, 196, 141, 141, 141, 141,
	141, 221, 235, 212, 60, 131, 59, 114, 57, 53,
	81, 28, 25, 170, 91, 161, 223, 68, -1000, -1000,
	-1000, -1000, 9, -1000, -1000, -4, -1000, 61, -1000, 200,
	-1000, 68, -1000, -1000, 199, 88, 4, -1000, 3, 79,
	78, 76, 75, 74, 102, 102, -1000, -1000, 155, -1000,
	233, 155, 155, 155, 155, 52, 47, 27, -1000, -1000,
	-1000, 73, 22, 18, 6, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -3, -7, -1000, -8, -11, 72,
	-12, -15, 207, -31, -33, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 216, -1000, -1000, -1000, -1000,
	-1000, 232, 231, 230, -1000, 229, 217, 208, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 71, -16, -19, -1000, -1000,
	-1000, -1000, 70, 69, 67, 58, 56, 54, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 262, 249, 261, 260, 6, 259, 258, 257, 14,
	11, 1, 256, 246, 255, 254, 253, 252, 5, 10,
	0, 32, 250, 93, 4, 13, 8,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 7,
	5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
	6, 12, 12, 12, 14, 14, 14, 13, 8, 20,
	20, 20, 18, 18, 18, 3, 3, 3, 3, 3,
	3, 9, 9, 9, 9, 21, 21, 21, 21, 21,
	21, 21, 21, 21, 21, 21, 24, 25, 25, 25,
	26, 26, 26, 10, 10, 10, 10, 10, 11, 11,
	11, 11, 19, 19, 15, 15, 15, 16, 16, 16,
	16, 22, 23, 23, 17, 17, 17,
}

var yyR2 = [...]int8{
	0, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 4, 4, 3, 4, 4, 4, 4,
	4, 6, 6, 6, 6, 6, 6, 4, 4, 4,
	4, 4, 4, 4, 4, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 0,
	2, 2, 0, 4, 4, 4, 4, 4, 3, 3,
	5, 5, 4, 4, 3, 3, 3, 3, 3, 3,
	3, 3, 4, 4, 0, 3, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, 18, -5, 7, -11, -6,
	-7, -8, -9, -10, -12, -13, -14, -15, -16, -17,
	4, 5, 19, 6, 8, -21, 9, 10, 11, 12,
	13, 20, 26, 21, 24, 25, 29, -19, -22, -23,
	-18, 22, 27, 28, 17, -2, 30, 38, 30, 38,
	35, 35, 31, 32, 33, 34, 4, 4, 4, 4,
	4, 35, 35, 35, 7, 19, -11, 5, 7, -11,
	-23, 7, -11, 35, 35, 35, 35, -21, -10, -20,
	5, 4, 7, -9, 19, -11, -13, 16, 7, 39,
	-20, -21, -10, 7, 39, -5, 7, 36, -11, -10,
	-18, -9, -19, 7, -21, -21, -21, -21, -25, -24,
	14, -25, -25, -25, -25, -5, 7, -18, 4, 5,
	19, 4, -5, 7, -18, 23, 23, 23, 23, 23,
	23, 23, 23, 23, 7, -11, 36, 7, -11, 4,
	7, -11, 35, 5, 5, 36, 36, 36, 36, 36,
	36, 36, 36, -24, -26, 15, 4, -26, -26, -26,
	-26, 37, 37, 37, 36, 37, 37, 37, 36, 36,
	36, 36, 36, 36, 36, 4, 7, -11, 40, 40,
	4, -20, 4, 4, 4, 4, 4, 4, 36, 36,
	36, 36, 36, 36, 36, 36, 36,
}

var yyDef = [...]int8{
	94, -2, 1, 3, 4, 5, 6, -2, -2, 7,
	8, 9, -2, 11, 13, -2, 15, 16, 17, 18,
	-2, -2, -2, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 63, 64,
	65, 0, 0, 0, 0, 2, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 69, 69, 69, 69,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 46, 47,
	55, 56, 57, 58, 59, 60, 62, 0, 78, 0,
	48, 49, 50, 79, 0, 0, 57, 25, 60, 0,
	65, 58, 61, 0, 51, 52, 53, 54, 72, 67,
	0, 72, 72, 72, 72, 0, 0, 0, 20, 21,
	22, 0, 0, 0, 0, 84, 85, 86, 87, 88,
	89, 90, 95, 96, 0, 0, 91, 0, 0, 0,
	0, 0, 0, 0, 0, 23, 24, 26, 27, 28,
	29, 30, 38, 68, 73, 0, 66, 74, 75, 76,
	77, 0, 0, 0, 37, 0, 0, 0, 82, 83,
	92, 93, 42, 43, 44, 0, 0, 0, 80, 81,
	70, 71, 0, 0, 0, 0, 0, 0, 39, 40,
	41, 31, 32, 33, 34, 35, 36,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	35, 36, 33, 31, 37, 32, 38, 34, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 30, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 39, 3, 40,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:68
		{
			PrintYySymDebug(yyDollar[1])
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:74
		{
			PrintYySym(yyDollar[3])
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:75
		{
			PrintGlobalYySym(yyDollar[3])
		}
	case 25:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:76
		{
			println("")
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:77
		{
			PrintYySym(yySymType{val: WalkField(yyDollar[3].val.(string))})
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:78
		{
			PrintYySym(yyDollar[3])
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:79
		{
			PrintYySym(yyDollar[3])
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:80
		{
			PrintYySym(yyDollar[3])
		}
	case 30:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:81
		{
			PrintYySym(yyDollar[3])
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:84
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:85
		{
			WriteFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:86
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:89
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:90
		{
			AppendFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:91
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:94
		{
			yyVAL = yySymType{val: ReadFile(yyDollar[3].val.(string))}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:97
		{
			PrintType(yyDollar[3])
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:100
		{
			yyVAL = yySymType{val: StrToJson(yyDollar[3].val)}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:101
		{
			yyVAL = yySymType{val: StrToJson(GlobalVarRead(yyDollar[3]))}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:102
		{
			yyVAL = yySymType{val: StrToJson(WalkField(yyDollar[3].val.(string)))}
		}
	case 42:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:105
		{
			yyVAL = yySymType{val: ToJsonStr(yyDollar[3].val)}
		}
	case 43:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:106
		{
			yyVAL = yySymType{val: ToJsonStr(GlobalVarRead(yyDollar[3]))}
		}
	case 44:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:107
		{
			yyVAL = yySymType{val: ToJsonStr(WalkField(yyDollar[3].val.(string)))}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:110
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:111
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:112
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:113
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:114
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:115
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:118
		{
			yyVAL = yySymType{val: ValAdd(yyDollar[1].val, yyDollar[3].val)}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:119
		{
			yyVAL = yySymType{val: ValMinus(yyDollar[1].val, yyDollar[3].val)}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:120
		{
			yyVAL = yySymType{val: ValMul(yyDollar[1].val, yyDollar[3].val)}
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:121
		{
			yyVAL = yySymType{val: ValDiv(yyDollar[1].val, yyDollar[3].val)}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
			yyVAL = yyDollar[1]
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:125
		{
			yyVAL = yyDollar[1]
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:126
		{
			yyVAL = yySymType{val: GlobalVarRead(yyDollar[1])}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:127
		{
			yyVAL = yyDollar[1]
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:128
		{
			yyVAL = yyDollar[1]
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:129
		{
			yyVAL = yySymType{val: WalkField(yyDollar[1].val.(string))}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:130
		{
			yyVAL = yyDollar[1]
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:131
		{
			yyVAL = yyDollar[1]
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:132
		{
			yyVAL = yyDollar[1]
		}
	case 64:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:133
		{
			yyVAL = yyDollar[1]
		}
	case 65:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:134
		{
			yyVAL = yyDollar[1]
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:137
		{
			yyVAL = yyDollar[2]
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:140
		{
			yyVAL = yyDollar[1]
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:141
		{
			yyVAL = joinHeaders(yyDollar[1], yyDollar[2])
		}
	case 69:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:142
		{
			yyVAL = yySymType{val: nil}
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:145
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:146
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 72:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:147
		{
			yyVAL = yySymType{val: nil}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:150
		{
			yyVAL = HttpSend("GET", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:151
		{
			yyVAL = HttpSend("PUT", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:152
		{
			yyVAL = HttpSend("POST", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:153
		{
			yyVAL = HttpSend("DELETE", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:154
		{
			yyVAL = HttpSend("HEAD", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:158
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:161
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 80:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:164
		{
			yyVAL = yySymType{val: fmt.Sprintf("%s.[%d]", yyDollar[1].val, yyDollar[4].val)}
		}
	case 81:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:167
		{
			yyVAL = yySymType{val: fmt.Sprintf("%s.[%d]", yyDollar[1].val, yyDollar[4].val)}
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:172
		{
			yyVAL = yySymType{val: ToStr(GlobalVarRead(yyDollar[3]))}
		}
	case 83:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:173
		{
			yyVAL = yySymType{val: ToStr(WalkField(yyDollar[3].val.(string)))}
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:176
		{
			RunIfCond(GlobalVarRead(yyDollar[2]), yyDollar[3].val)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:177
		{
			RunIfCond(yyDollar[2].val, yyDollar[3].val)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:178
		{
			RunIfCond(WalkField(yyDollar[2].val.(string)), yyDollar[3].val)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:181
		{
			RepeatBlock(yyDollar[2].val, yyDollar[3].val)
		}
	case 88:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:182
		{
			RepeatBlock(GlobalVarRead(yyDollar[2]), yyDollar[3].val)
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:183
		{
			RepeatBlock(WalkField(yyDollar[2].val.(string)), yyDollar[3].val)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:184
		{
			RepeatBlock(yyDollar[2].val, yyDollar[3].val)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:187
		{
			yyVAL = yySymType{val: map[string]any{}}
		}
	case 92:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:190
		{
			yyVAL = yySymType{val: CalcLen(GlobalVarRead(yyDollar[3]))}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:191
		{
			yyVAL = yySymType{val: CalcLen(WalkField(yyDollar[3].val.(string)))}
		}
	case 95:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:194
		{
			DoForEach(GlobalVarRead(yyDollar[2]), yyDollar[3].val)
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:195
		{
			DoForEach(WalkField(yyDollar[2].val.(string)), yyDollar[3].val)
		}
	}
	goto yystack /* stack new state and value */
}
