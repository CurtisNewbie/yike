// Code generated by goyacc -o y.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

import "fmt"

//line parser.y:8
type yySymType struct {
	yys int
	val any
}

const String = 57346
const Number = 57347
const Print = 57348
const Label = 57349
const Type = 57350
const Get = 57351
const Put = 57352
const Post = 57353
const Delete = 57354
const Head = 57355
const Header = 57356
const Body = 57357
const Json = 57358
const JsonStr = 57359
const Comment = 57360
const Bool = 57361
const Write = 57362
const Append = 57363
const StringFunc = 57364
const CodeBlock = 57365
const If = 57366
const For = 57367
const Read = 57368
const Map = 57369
const Len = 57370
const ForEach = 57371

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"String",
	"Number",
	"Print",
	"Label",
	"Type",
	"Get",
	"Put",
	"Post",
	"Delete",
	"Head",
	"Header",
	"Body",
	"Json",
	"JsonStr",
	"Comment",
	"Bool",
	"Write",
	"Append",
	"StringFunc",
	"CodeBlock",
	"If",
	"For",
	"Read",
	"Map",
	"Len",
	"ForEach",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"')'",
	"','",
	"'.'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 254

var yyAct = [...]uint8{
	58, 62, 7, 7, 93, 165, 164, 80, 135, 56,
	183, 182, 35, 33, 180, 67, 35, 179, 178, 33,
	35, 75, 177, 35, 33, 59, 175, 174, 35, 33,
	48, 51, 55, 34, 33, 77, 92, 189, 85, 81,
	188, 35, 69, 70, 78, 83, 90, 20, 21, 22,
	23, 24, 87, 76, 128, 74, 35, 71, 115, 101,
	72, 105, 82, 148, 26, 73, 53, 114, 127, 99,
	33, 103, 111, 35, 84, 110, 95, 96, 97, 98,
	108, 106, 33, 32, 11, 147, 187, 35, 146, 123,
	33, 33, 144, 143, 63, 35, 33, 134, 142, 61,
	134, 134, 134, 134, 138, 139, 140, 141, 116, 117,
	118, 119, 186, 112, 185, 150, 184, 57, 181, 79,
	176, 86, 157, 159, 160, 163, 151, 152, 153, 154,
	145, 89, 133, 132, 131, 130, 88, 167, 18, 6,
	19, 20, 21, 22, 23, 24, 129, 126, 118, 119,
	5, 122, 25, 27, 121, 120, 28, 29, 26, 69,
	70, 30, 60, 113, 20, 21, 22, 23, 24, 45,
	44, 68, 74, 43, 71, 69, 70, 72, 60, 37,
	36, 26, 73, 53, 49, 66, 50, 109, 74, 107,
	71, 69, 70, 72, 104, 94, 136, 26, 73, 53,
	46, 166, 94, 158, 74, 149, 71, 53, 69, 70,
	91, 100, 47, 68, 161, 52, 155, 162, 54, 156,
	125, 74, 124, 71, 173, 172, 171, 170, 169, 168,
	137, 102, 42, 41, 40, 39, 38, 64, 13, 13,
	2, 65, 31, 17, 16, 15, 14, 12, 10, 9,
	8, 4, 3, 1,
}

var yyPact = [...]int16{
	132, 132, -1000, -1000, -1000, -1000, 53, 3, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 145, 144,
	232, 231, 230, 229, 228, 138, 135, 134, 193, 179,
	211, -1000, 155, 14, 155, 0, 38, 203, 188, 188,
	188, 188, 188, 204, 227, 187, 58, 166, 57, 164,
	52, 49, 90, 128, 44, 35, 77, -1000, -1000, -1000,
	-4, -1000, -15, -1000, -1000, -1000, -1000, -1000, 120, -1000,
	-1000, -1000, 119, 116, 54, -1000, 217, -1000, 77, -1000,
	-1000, 215, 111, 32, -1000, 18, 110, 99, 98, 97,
	77, 96, 181, -1000, 226, 181, 181, 181, 181, 61,
	56, 55, 94, 51, 48, 26, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 198, -1000, -1000, 171, 171, 171, 171,
	212, 196, 88, 210, -34, -35, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 197, -1000, -1000, -1000,
	-1000, -1000, 225, 224, 223, -1000, 222, 221, 220, -9,
	-10, 115, 115, -1000, -1000, 84, -14, -18, -19, -22,
	-1000, 82, -25, -26, -1000, -1000, -1000, -1000, 80, 78,
	76, 50, 4, 1, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 253, 240, 252, 251, 250, 249, 248, 84, 247,
	237, 246, 245, 244, 243, 25, 1, 15, 99, 94,
	0, 9, 241, 185, 4, 36, 8,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 2, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 6, 15, 15, 15,
	5, 5, 5, 5, 5, 5, 5, 5, 9, 9,
	9, 11, 11, 11, 10, 7, 20, 20, 20, 17,
	17, 17, 3, 3, 3, 3, 3, 3, 18, 18,
	18, 18, 21, 21, 21, 21, 21, 21, 21, 21,
	21, 24, 25, 25, 25, 26, 26, 26, 8, 8,
	8, 8, 8, 16, 16, 16, 16, 19, 19, 12,
	12, 12, 13, 13, 13, 13, 22, 23, 23, 14,
	14,
}

var yyR2 = [...]int8{
	0, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	4, 4, 3, 4, 4, 4, 4, 4, 6, 6,
	6, 6, 6, 6, 4, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 2, 0, 2, 2, 0, 4, 4,
	4, 4, 4, 3, 3, 5, 5, 4, 4, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 3,
	3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, 18, 7, -16, -5, -6,
	-7, -8, -9, -10, -11, -12, -13, -14, 6, 8,
	9, 10, 11, 12, 13, 20, 26, 21, 24, 25,
	29, -2, 30, 38, 30, 38, 35, 35, 4, 4,
	4, 4, 4, 35, 35, 35, 7, 19, -16, 5,
	7, -16, -23, 28, 7, -16, -21, -8, -20, -15,
	7, -18, -16, -19, -10, -22, -23, -17, 16, 4,
	5, 19, 22, 27, 17, 7, 39, -20, -21, -8,
	7, 39, -15, 7, 36, -16, -8, -17, -18, -19,
	-21, 7, -25, -24, 14, -25, -25, -25, -25, -15,
	7, -17, 4, -15, 7, -17, 23, 23, 23, 23,
	23, 23, 23, 35, 23, 23, 31, 32, 33, 34,
	35, 35, 35, 35, 5, 5, 36, 36, 36, 36,
	36, 36, 36, 36, -24, -26, 15, 4, -26, -26,
	-26, -26, 37, 37, 37, 36, 37, 37, 37, 7,
	-16, -21, -21, -21, -21, 4, 7, -16, 7, -16,
	36, 4, 7, -16, 40, 40, 4, -20, 4, 4,
	4, 4, 4, 4, 36, 36, 36, 36, 36, 36,
	36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
}

var yyDef = [...]int8{
	0, -2, 1, 3, 4, 5, 16, 0, 6, 7,
	8, 9, 10, 11, 12, 13, 14, 15, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 2, 0, 0, 0, 0, 0, 0, 64, 64,
	64, 64, 64, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 42, 43, 44, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 0, 17,
	18, 19, 0, 0, 0, 73, 0, 45, 46, 47,
	74, 0, 52, 53, 22, 55, 0, 60, 54, 56,
	0, 0, 67, 62, 0, 67, 67, 67, 67, 0,
	0, 0, 0, 0, 0, 0, 79, 80, 81, 82,
	83, 84, 85, 0, 89, 90, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 20, 21, 23, 24,
	25, 26, 27, 35, 63, 68, 0, 61, 69, 70,
	71, 72, 0, 0, 0, 34, 0, 0, 0, 0,
	0, 48, 49, 50, 51, 0, 0, 0, 0, 0,
	86, 0, 0, 0, 75, 76, 65, 66, 0, 0,
	0, 0, 0, 0, 87, 88, 36, 37, 38, 77,
	78, 39, 40, 41, 28, 29, 30, 31, 32, 33,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	35, 36, 33, 31, 37, 32, 38, 34, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 30, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 39, 3, 40,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:65
		{
			PrintYySymDebug(yyDollar[1])
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:71
		{
			PrintYySym(yyDollar[3])
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:72
		{
			PrintGlobalYySym(yyDollar[3])
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:73
		{
			println("")
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:74
		{
			PrintYySym(yySymType{val: WalkField(yyDollar[3].val.(string))})
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:75
		{
			PrintYySym(yyDollar[3])
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:76
		{
			PrintYySym(yyDollar[3])
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:77
		{
			PrintYySym(yyDollar[3])
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:78
		{
			PrintYySym(yyDollar[3])
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:81
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:82
		{
			WriteFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:83
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:86
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:87
		{
			AppendFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:88
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:91
		{
			yyVAL = yySymType{val: ReadFile(yyDollar[3].val.(string))}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:94
		{
			PrintType(yyDollar[3])
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:97
		{
			yyVAL = yySymType{val: StrToJson(yyDollar[3].val)}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:98
		{
			yyVAL = yySymType{val: StrToJson(GlobalVarRead(yyDollar[3]))}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:99
		{
			yyVAL = yySymType{val: StrToJson(WalkField(yyDollar[3].val.(string)))}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:102
		{
			yyVAL = yySymType{val: ToJsonStr(yyDollar[3].val)}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:103
		{
			yyVAL = yySymType{val: ToJsonStr(GlobalVarRead(yyDollar[3]))}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:104
		{
			yyVAL = yySymType{val: ToJsonStr(WalkField(yyDollar[3].val.(string)))}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:107
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:108
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:109
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:110
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:111
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:112
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:115
		{
			yyVAL = yySymType{val: ValAdd(yyDollar[1].val, yyDollar[3].val)}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:116
		{
			yyVAL = yySymType{val: ValMinus(yyDollar[1].val, yyDollar[3].val)}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:117
		{
			yyVAL = yySymType{val: ValMul(yyDollar[1].val, yyDollar[3].val)}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:118
		{
			yyVAL = yySymType{val: ValDiv(yyDollar[1].val, yyDollar[3].val)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:121
		{
			yyVAL = yyDollar[1]
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:122
		{
			yyVAL = yySymType{val: GlobalVarRead(yyDollar[1])}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:123
		{
			yyVAL = yyDollar[1]
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:124
		{
			yyVAL = yySymType{val: WalkField(yyDollar[1].val.(string))}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:125
		{
			yyVAL = yyDollar[1]
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:126
		{
			yyVAL = yyDollar[1]
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:127
		{
			yyVAL = yyDollar[1]
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:128
		{
			yyVAL = yyDollar[1]
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:129
		{
			yyVAL = yyDollar[1]
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:132
		{
			yyVAL = yyDollar[2]
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:135
		{
			yyVAL = yyDollar[1]
		}
	case 63:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:136
		{
			yyVAL = joinHeaders(yyDollar[1], yyDollar[2])
		}
	case 64:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:137
		{
			yyVAL = yySymType{val: nil}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:140
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:141
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 67:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.y:142
		{
			yyVAL = yySymType{val: nil}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:145
		{
			yyVAL = HttpSend("GET", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:146
		{
			yyVAL = HttpSend("PUT", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:147
		{
			yyVAL = HttpSend("POST", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:148
		{
			yyVAL = HttpSend("DELETE", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:149
		{
			yyVAL = HttpSend("HEAD", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:153
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:156
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:159
		{
			yyVAL = yySymType{val: fmt.Sprintf("%s.[%d]", yyDollar[1].val, yyDollar[4].val)}
		}
	case 76:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.y:162
		{
			yyVAL = yySymType{val: fmt.Sprintf("%s.[%d]", yyDollar[1].val, yyDollar[4].val)}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:167
		{
			yyVAL = yySymType{val: ToStr(GlobalVarRead(yyDollar[3]))}
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:168
		{
			yyVAL = yySymType{val: ToStr(WalkField(yyDollar[3].val.(string)))}
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:171
		{
			RunIfCond(GlobalVarRead(yyDollar[2]), yyDollar[3].val)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:172
		{
			RunIfCond(yyDollar[2].val, yyDollar[3].val)
		}
	case 81:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:173
		{
			RunIfCond(WalkField(yyDollar[2].val.(string)), yyDollar[3].val)
		}
	case 82:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:176
		{
			RepeatBlock(yyDollar[2].val, yyDollar[3].val)
		}
	case 83:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:177
		{
			RepeatBlock(GlobalVarRead(yyDollar[2]), yyDollar[3].val)
		}
	case 84:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:178
		{
			RepeatBlock(WalkField(yyDollar[2].val.(string)), yyDollar[3].val)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:179
		{
			RepeatBlock(yyDollar[2].val, yyDollar[3].val)
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:182
		{
			yyVAL = yySymType{val: map[string]any{}}
		}
	case 87:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:185
		{
			yyVAL = yySymType{val: CalcLen(GlobalVarRead(yyDollar[3]))}
		}
	case 88:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:186
		{
			yyVAL = yySymType{val: CalcLen(WalkField(yyDollar[3].val.(string)))}
		}
	case 89:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:189
		{
			DoForEach(GlobalVarRead(yyDollar[2]), yyDollar[3].val)
		}
	case 90:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:190
		{
			DoForEach(WalkField(yyDollar[2].val.(string)), yyDollar[3].val)
		}
	}
	goto yystack /* stack new state and value */
}
