// Code generated by goyacc -o y.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:6
type yySymType struct {
	yys int
	val any
}

const String = 57346
const Number = 57347
const Print = 57348
const Label = 57349
const Type = 57350
const Get = 57351
const Put = 57352
const Post = 57353
const Delete = 57354
const Head = 57355
const Header = 57356
const Body = 57357
const Json = 57358
const JsonStr = 57359
const Comment = 57360
const Bool = 57361
const Write = 57362
const Append = 57363
const StringFunc = 57364
const CodeBlock = 57365
const If = 57366
const For = 57367

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"String",
	"Number",
	"Print",
	"Label",
	"Type",
	"Get",
	"Put",
	"Post",
	"Delete",
	"Head",
	"Header",
	"Body",
	"Json",
	"JsonStr",
	"Comment",
	"Bool",
	"Write",
	"Append",
	"StringFunc",
	"CodeBlock",
	"If",
	"For",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"')'",
	"','",
	"'.'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 7,
	27, 56,
	28, 56,
	29, 56,
	30, 56,
	-2, 17,
	-1, 8,
	27, 59,
	28, 59,
	29, 59,
	30, 59,
	-2, 12,
	-1, 12,
	27, 57,
	28, 57,
	29, 57,
	30, 57,
	-2, 10,
	-1, 18,
	27, 55,
	28, 55,
	29, 55,
	30, 55,
	-2, 18,
	-1, 19,
	27, 54,
	28, 54,
	29, 54,
	30, 54,
	-2, 19,
	-1, 20,
	27, 58,
	28, 58,
	29, 58,
	30, 58,
	-2, 20,
}

const yyPrivate = 57344

const yyLast = 205

var yyAct = [...]uint8{
	60, 67, 8, 8, 121, 90, 89, 13, 61, 33,
	6, 39, 37, 18, 19, 156, 77, 39, 24, 25,
	26, 27, 28, 155, 162, 37, 69, 23, 20, 38,
	153, 34, 39, 55, 65, 12, 12, 39, 152, 71,
	37, 78, 79, 136, 59, 39, 74, 73, 80, 81,
	83, 76, 134, 133, 92, 93, 94, 95, 107, 110,
	98, 104, 96, 102, 58, 135, 72, 37, 161, 39,
	85, 86, 87, 88, 115, 82, 39, 114, 105, 37,
	36, 132, 131, 130, 129, 160, 44, 45, 37, 37,
	42, 43, 44, 45, 159, 112, 123, 125, 126, 127,
	128, 18, 19, 21, 7, 22, 24, 25, 26, 27,
	28, 158, 157, 139, 142, 5, 20, 29, 30, 34,
	154, 31, 32, 144, 63, 62, 151, 64, 120, 24,
	25, 26, 27, 28, 119, 118, 68, 69, 117, 66,
	116, 113, 34, 111, 57, 52, 51, 41, 40, 63,
	62, 108, 64, 106, 53, 99, 100, 143, 103, 99,
	100, 122, 97, 91, 66, 109, 54, 34, 69, 68,
	101, 84, 69, 140, 101, 137, 141, 75, 138, 70,
	56, 150, 149, 148, 147, 146, 145, 124, 50, 49,
	48, 47, 46, 2, 17, 35, 16, 15, 14, 11,
	10, 9, 4, 3, 1,
}

var yyPact = [...]int16{
	97, 97, -1000, -1000, -1000, -1000, -1000, 54, 3, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 117, 116, 63, 188, 187, 186, 185, 184, 115,
	114, 147, 175, -1000, 113, -1000, 120, 172, 120, 170,
	9, 164, 145, 145, 145, 145, 149, 149, 149, 149,
	149, 155, 151, 55, 130, 35, 128, 158, 63, -1000,
	-1000, -1000, -1000, -1000, -22, -1000, -1000, -23, 112, 64,
	-1000, -1000, 63, -1000, -1000, -1000, 109, 45, -1000, 42,
	108, 106, 103, 102, 96, 57, 57, -1000, -1000, 146,
	149, 183, 146, 146, 146, 146, 51, 50, 49, -1000,
	-1000, -1000, 48, 20, 19, -1000, -1000, -1000, -1000, 33,
	11, 171, 169, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 153, -1000, -1000, -1000, -1000, -1000, -1000, 182,
	181, 180, 179, 178, 177, -1000, -1000, 94, 6, -2,
	88, -9, -17, -1000, -1000, 80, 79, 62, 53, 36,
	-8, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 204, 193, 203, 202, 10, 201, 200, 199, 34,
	7, 1, 198, 197, 196, 194, 8, 9, 0, 27,
	5, 6, 4,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 2, 2, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 7, 5, 5,
	5, 6, 6, 6, 6, 6, 6, 6, 6, 12,
	12, 12, 13, 13, 13, 8, 18, 18, 18, 16,
	16, 16, 3, 3, 3, 3, 3, 3, 3, 3,
	9, 9, 9, 9, 19, 19, 19, 19, 19, 19,
	19, 20, 21, 21, 21, 22, 22, 22, 10, 10,
	10, 10, 10, 11, 11, 17, 17, 14, 14, 14,
	15,
}

var yyR2 = [...]int8{
	0, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 4, 4, 3, 4, 4, 4, 4, 4, 6,
	6, 6, 6, 6, 6, 4, 4, 4, 4, 4,
	4, 4, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 1, 1, 1, 1, 1, 1,
	1, 2, 1, 0, 2, 0, 2, 2, 4, 4,
	4, 4, 4, 3, 3, 4, 4, 3, 3, 3,
	3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, 18, -5, 7, -11, -6,
	-7, -8, -9, -10, -12, -13, -14, -15, 4, 5,
	19, 6, 8, -19, 9, 10, 11, 12, 13, 20,
	21, 24, 25, -17, 22, -2, 26, 34, 26, 34,
	31, 31, 27, 28, 29, 30, 4, 4, 4, 4,
	4, 31, 31, 7, 19, -11, 5, 31, -19, -10,
	-18, -16, 5, 4, 7, -9, 19, -11, 16, 17,
	7, -18, -19, -16, -10, 7, -5, 7, 32, -11,
	-10, -16, -9, -17, 7, -19, -19, -19, -19, -21,
	-20, 14, -21, -21, -21, -21, -5, 7, -16, 4,
	5, 19, -5, 7, -16, 23, 23, 23, 23, 7,
	-11, 31, 31, 32, 32, 32, 32, 32, 32, 32,
	32, -22, 15, -20, 4, -22, -22, -22, -22, 33,
	33, 33, 33, 33, 33, 32, 32, 4, 7, -11,
	4, 7, -11, 4, -18, 4, 4, 4, 4, 4,
	4, 32, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32,
}

var yyDef = [...]int8{
	0, -2, 1, 3, 4, 5, 6, -2, -2, 7,
	8, 9, -2, 11, 13, 14, 15, 16, -2, -2,
	-2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 60, 0, 2, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 63, 63, 63, 63,
	63, 0, 0, 0, 0, 0, 0, 0, 42, 43,
	44, 45, 54, 55, 56, 57, 58, 59, 0, 0,
	73, 46, 47, 48, 49, 74, 0, 56, 23, 59,
	0, 0, 57, 60, 0, 50, 51, 52, 53, 65,
	62, 0, 65, 65, 65, 65, 0, 0, 0, 18,
	19, 20, 0, 0, 0, 77, 78, 79, 80, 0,
	0, 0, 0, 21, 22, 24, 25, 26, 27, 28,
	35, 68, 0, 64, 61, 69, 70, 71, 72, 0,
	0, 0, 0, 0, 0, 75, 76, 0, 0, 0,
	0, 0, 0, 66, 67, 0, 0, 0, 0, 0,
	0, 36, 37, 38, 39, 40, 41, 29, 30, 31,
	32, 33, 34,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	31, 32, 29, 27, 33, 28, 34, 30, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 26,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 17:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:59
		{
			PrintYySymDebug(yyDollar[1])
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:65
		{
			PrintYySym(yyDollar[3])
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:66
		{
			PrintGlobalYySym(yyDollar[3])
		}
	case 23:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:67
		{
			println("")
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:68
		{
			PrintYySym(yySymType{val: WalkField(yyDollar[3].val.(string))})
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:69
		{
			PrintYySym(yyDollar[3])
		}
	case 26:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:70
		{
			PrintYySym(yyDollar[3])
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:71
		{
			PrintYySym(yyDollar[3])
		}
	case 28:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:72
		{
			PrintYySym(yyDollar[3])
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:75
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:76
		{
			WriteFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:77
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:80
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:81
		{
			AppendFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 34:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:82
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:85
		{
			PrintType(yyDollar[3])
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:88
		{
			yyVAL = yySymType{val: StrToMap(yyDollar[3].val)}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:89
		{
			yyVAL = yySymType{val: StrToMap(GlobalVarRead(yyDollar[3]))}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:90
		{
			yyVAL = yySymType{val: StrToMap(WalkField(yyDollar[3].val.(string)))}
		}
	case 39:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:93
		{
			yyVAL = yySymType{val: ToJsonStr(yyDollar[3].val)}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:94
		{
			yyVAL = yySymType{val: ToJsonStr(GlobalVarRead(yyDollar[3]))}
		}
	case 41:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:95
		{
			yyVAL = yySymType{val: ToJsonStr(WalkField(yyDollar[3].val.(string)))}
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:98
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:99
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:100
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:101
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:102
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:103
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:104
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:105
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:108
		{
			yyVAL = yySymType{val: ValAdd(yyDollar[1].val, yyDollar[3].val)}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:109
		{
			yyVAL = yySymType{val: ValMinus(yyDollar[1].val, yyDollar[3].val)}
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:110
		{
			yyVAL = yySymType{val: ValMul(yyDollar[1].val, yyDollar[3].val)}
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:111
		{
			yyVAL = yySymType{val: ValDiv(yyDollar[1].val, yyDollar[3].val)}
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:114
		{
			yyVAL = yyDollar[1]
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:115
		{
			yyVAL = yyDollar[1]
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:116
		{
			yyVAL = yySymType{val: GlobalVarRead(yyDollar[1])}
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:117
		{
			yyVAL = yyDollar[1]
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:118
		{
			yyVAL = yyDollar[1]
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:119
		{
			yyVAL = yySymType{val: WalkField(yyDollar[1].val.(string))}
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:120
		{
			yyVAL = yyDollar[1]
		}
	case 61:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:124
		{
			yyVAL = yyDollar[2]
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:127
		{
			yyVAL = yyDollar[1]
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:129
		{
			yyVAL = joinHeaders(yyDollar[1], yyDollar[2])
		}
	case 66:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:133
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:134
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:137
		{
			yyVAL = HttpSend("GET", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:138
		{
			yyVAL = HttpSend("PUT", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:139
		{
			yyVAL = HttpSend("POST", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 71:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:140
		{
			yyVAL = HttpSend("DELETE", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 72:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:141
		{
			yyVAL = HttpSend("HEAD", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:145
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 74:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:148
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 75:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:153
		{
			yyVAL = yySymType{val: ToStr(GlobalVarRead(yyDollar[3]))}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:154
		{
			yyVAL = yySymType{val: ToStr(WalkField(yyDollar[3].val.(string)))}
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:157
		{
			RunIfCond(GlobalVarRead(yyDollar[2]), yyDollar[3].val)
		}
	case 78:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:158
		{
			RunIfCond(yyDollar[2].val, yyDollar[3].val)
		}
	case 79:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:159
		{
			RunIfCond(WalkField(yyDollar[2].val.(string)), yyDollar[3].val)
		}
	case 80:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:162
		{
			RepeatBlock(yyDollar[2].val, yyDollar[3].val)
		}
	}
	goto yystack /* stack new state and value */
}
