// Code generated by goyacc -o y.go parser.y. DO NOT EDIT.

//line parser.y:2
package parser

import __yyfmt__ "fmt"

//line parser.y:2

//line parser.y:6
type yySymType struct {
	yys int
	val any
}

const String = 57346
const Number = 57347
const Print = 57348
const Label = 57349
const Type = 57350
const Get = 57351
const Put = 57352
const Post = 57353
const Delete = 57354
const Head = 57355
const Header = 57356
const Body = 57357
const Json = 57358
const JsonStr = 57359
const Comment = 57360
const Bool = 57361
const Write = 57362
const Append = 57363
const StringFunc = 57364

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"String",
	"Number",
	"Print",
	"Label",
	"Type",
	"Get",
	"Put",
	"Post",
	"Delete",
	"Head",
	"Header",
	"Body",
	"Json",
	"JsonStr",
	"Comment",
	"Bool",
	"Write",
	"Append",
	"StringFunc",
	"'='",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'('",
	"')'",
	"','",
	"'.'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 6,
	1, 14,
	18, 14,
	-2, 54,
	-1, 7,
	1, 11,
	18, 11,
	-2, 57,
	-1, 11,
	1, 9,
	18, 9,
	-2, 55,
	-1, 15,
	1, 15,
	18, 15,
	29, 15,
	-2, 53,
	-1, 16,
	1, 16,
	18, 16,
	29, 16,
	-2, 52,
	-1, 17,
	1, 17,
	18, 17,
	29, 17,
	-2, 56,
}

const yyPrivate = 57344

const yyLast = 188

var yyAct = [...]uint8{
	51, 58, 7, 108, 81, 52, 20, 5, 143, 34,
	34, 15, 16, 80, 68, 28, 21, 22, 23, 24,
	25, 142, 32, 32, 60, 140, 17, 34, 12, 29,
	56, 11, 121, 139, 62, 32, 69, 70, 49, 64,
	63, 72, 120, 67, 76, 77, 78, 79, 119, 118,
	97, 74, 89, 95, 87, 93, 83, 84, 85, 86,
	50, 123, 65, 34, 71, 117, 73, 15, 16, 18,
	6, 19, 21, 22, 23, 24, 25, 122, 102, 32,
	34, 4, 17, 26, 27, 29, 110, 112, 113, 114,
	115, 101, 99, 32, 33, 31, 116, 149, 148, 147,
	126, 129, 34, 32, 146, 145, 54, 53, 144, 55,
	131, 21, 22, 23, 24, 25, 141, 138, 59, 60,
	107, 57, 106, 105, 29, 37, 38, 39, 40, 104,
	109, 82, 103, 100, 39, 40, 30, 98, 48, 47,
	46, 36, 35, 54, 53, 130, 55, 90, 91, 96,
	94, 90, 91, 127, 88, 75, 128, 59, 57, 66,
	60, 29, 92, 61, 60, 124, 92, 137, 125, 136,
	135, 134, 133, 132, 111, 45, 44, 43, 42, 41,
	14, 13, 10, 9, 8, 3, 2, 1,
}

var yyPact = [...]int16{
	63, 118, -1000, -1000, -1000, -1000, 72, 71, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 114, 113,
	101, 175, 174, 173, 172, 171, 112, 111, -1000, 110,
	-1000, 102, 156, 102, 152, 7, 148, 139, 139, 139,
	139, 117, 117, 117, 117, 117, 147, 143, 142, 101,
	-1000, -1000, -1000, -1000, -1000, -9, -1000, -1000, -22, 109,
	64, -1000, -1000, 101, -1000, -1000, -1000, 104, 62, -1000,
	49, 103, 100, 94, 93, 91, 108, 108, -1000, -1000,
	115, 117, 170, 115, 115, 115, 115, 66, 35, 19,
	-1000, -1000, -1000, 18, 12, 2, 48, 32, 161, 149,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 141,
	-1000, -1000, -1000, -1000, -1000, -1000, 169, 168, 167, 166,
	165, 163, -1000, -1000, 88, 4, -4, 87, -8, -21,
	-1000, -1000, 79, 76, 75, 70, 69, 68, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 187, 186, 185, 7, 184, 183, 182, 30, 28,
	1, 181, 180, 5, 15, 0, 6, 4, 13, 3,
}

var yyR1 = [...]int8{
	0, 1, 1, 1, 1, 1, 3, 3, 3, 3,
	3, 3, 3, 3, 6, 4, 4, 4, 5, 5,
	5, 5, 5, 5, 5, 5, 11, 11, 11, 12,
	12, 12, 7, 15, 15, 15, 13, 13, 13, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 8, 8,
	8, 8, 16, 16, 16, 16, 16, 16, 16, 17,
	18, 18, 18, 19, 19, 19, 9, 9, 9, 9,
	9, 10, 10, 14, 14,
}

var yyR2 = [...]int8{
	0, 1, 1, 1, 2, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 4, 4,
	3, 4, 4, 4, 4, 4, 6, 6, 6, 6,
	6, 6, 4, 4, 4, 4, 4, 4, 4, 3,
	2, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 1, 1, 1, 1, 1, 1, 1, 2,
	1, 0, 2, 0, 2, 2, 4, 4, 4, 4,
	4, 3, 3, 4, 4,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, 18, -4, 7, -10, -5, -6,
	-7, -8, -9, -11, -12, 4, 5, 19, 6, 8,
	-16, 9, 10, 11, 12, 13, 20, 21, -14, 22,
	18, 23, 31, 23, 31, 28, 28, 24, 25, 26,
	27, 4, 4, 4, 4, 4, 28, 28, 28, -16,
	-9, -15, -13, 5, 4, 7, -8, 19, -10, 16,
	17, 7, -15, -16, -13, -9, 7, -4, 7, 29,
	-10, -9, -13, -8, -14, 7, -16, -16, -16, -16,
	-18, -17, 14, -18, -18, -18, -18, -4, 7, -13,
	4, 5, 19, -4, 7, -13, 7, -10, 28, 28,
	29, 29, 29, 29, 29, 29, 29, 29, -19, 15,
	-17, 4, -19, -19, -19, -19, 30, 30, 30, 30,
	30, 30, 29, 29, 4, 7, -10, 4, 7, -10,
	4, -15, 4, 4, 4, 4, 4, 4, 29, 29,
	29, 29, 29, 29, 29, 29, 29, 29, 29, 29,
}

var yyDef = [...]int8{
	0, -2, 1, 2, 3, 5, -2, -2, 6, 7,
	8, -2, 10, 12, 13, -2, -2, -2, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 58, 0,
	4, 40, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 61, 61, 61, 61, 0, 0, 0, 39,
	41, 42, 43, 52, 53, 54, 55, 56, 57, 0,
	0, 71, 44, 45, 46, 47, 72, 0, 54, 20,
	57, 0, 0, 55, 58, 0, 48, 49, 50, 51,
	63, 60, 0, 63, 63, 63, 63, 0, 0, 0,
	15, 16, 17, 0, 0, 0, 0, 0, 0, 0,
	18, 19, 21, 22, 23, 24, 25, 32, 66, 0,
	62, 59, 67, 68, 69, 70, 0, 0, 0, 0,
	0, 0, 73, 74, 0, 0, 0, 0, 0, 0,
	64, 65, 0, 0, 0, 0, 0, 0, 33, 34,
	35, 36, 37, 38, 26, 27, 28, 29, 30, 31,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	28, 29, 26, 24, 30, 25, 31, 27, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 23,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:51
		{
			PrintYySymDebug(yyDollar[1])
		}
	case 18:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:57
		{
			PrintYySym(yyDollar[3])
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:58
		{
			PrintGlobalYySym(yyDollar[3])
		}
	case 20:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:59
		{
			println("")
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:60
		{
			PrintYySym(yySymType{val: WalkField(yyDollar[3].val.(string))})
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:61
		{
			PrintYySym(yyDollar[3])
		}
	case 23:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:62
		{
			PrintYySym(yyDollar[3])
		}
	case 24:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:63
		{
			PrintYySym(yyDollar[3])
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:64
		{
			PrintYySym(yyDollar[3])
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:67
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 27:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:68
		{
			WriteFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 28:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:69
		{
			WriteFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 29:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:72
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 30:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:73
		{
			AppendFile(GlobalVarRead(yyDollar[3]), yyDollar[5].val.(string))
		}
	case 31:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.y:74
		{
			AppendFile(yyDollar[3].val, yyDollar[5].val.(string))
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:77
		{
			PrintType(yyDollar[3])
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:80
		{
			yyVAL = yySymType{val: StrToMap(yyDollar[3].val)}
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:81
		{
			yyVAL = yySymType{val: StrToMap(GlobalVarRead(yyDollar[3]))}
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:82
		{
			yyVAL = yySymType{val: StrToMap(WalkField(yyDollar[3].val.(string)))}
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:85
		{
			yyVAL = yySymType{val: ToJsonStr(yyDollar[3].val)}
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:86
		{
			yyVAL = yySymType{val: ToJsonStr(GlobalVarRead(yyDollar[3]))}
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:87
		{
			yyVAL = yySymType{val: ToJsonStr(WalkField(yyDollar[3].val.(string)))}
		}
	case 39:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:90
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:91
		{
			SyntaxError()
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:92
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 42:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:93
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 43:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:94
		{
			GlobalVarWrite(yyDollar[1], yyDollar[3].val)
		}
	case 44:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:95
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:96
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:97
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:98
		{
			GlobalVarFieldWrite(yyDollar[1].val.(string), yyDollar[3].val)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:101
		{
			yyVAL = yySymType{val: ValAdd(yyDollar[1].val, yyDollar[3].val)}
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:102
		{
			yyVAL = yySymType{val: ValMinus(yyDollar[1].val, yyDollar[3].val)}
		}
	case 50:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:103
		{
			yyVAL = yySymType{val: ValMul(yyDollar[1].val, yyDollar[3].val)}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:104
		{
			yyVAL = yySymType{val: ValDiv(yyDollar[1].val, yyDollar[3].val)}
		}
	case 52:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:107
		{
			yyVAL = yyDollar[1]
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:108
		{
			yyVAL = yyDollar[1]
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:109
		{
			yyVAL = yySymType{val: GlobalVarRead(yyDollar[1])}
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:110
		{
			yyVAL = yyDollar[1]
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:111
		{
			yyVAL = yyDollar[1]
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:112
		{
			yyVAL = yySymType{val: WalkField(yyDollar[1].val.(string))}
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:113
		{
			yyVAL = yyDollar[1]
		}
	case 59:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:117
		{
			yyVAL = yyDollar[2]
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.y:120
		{
			yyVAL = yyDollar[1]
		}
	case 62:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:122
		{
			yyVAL = joinHeaders(yyDollar[1], yyDollar[2])
		}
	case 64:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:126
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.y:127
		{
			yyVAL = yySymType{val: yyDollar[2].val}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:130
		{
			yyVAL = HttpSend("GET", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 67:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:131
		{
			yyVAL = HttpSend("PUT", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 68:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:132
		{
			yyVAL = HttpSend("POST", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 69:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:133
		{
			yyVAL = HttpSend("DELETE", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 70:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:134
		{
			yyVAL = HttpSend("HEAD", yyDollar[2].val.(string), yyDollar[3], yyDollar[4])
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:138
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.y:141
		{
			yyVAL = yySymType{val: yyDollar[1].val.(string) + "." + yyDollar[3].val.(string)}
		}
	case 73:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:146
		{
			yyVAL = yySymType{val: ToStr(GlobalVarRead(yyDollar[3]))}
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.y:147
		{
			yyVAL = yySymType{val: ToStr(WalkField(yyDollar[3].val.(string)))}
		}
	}
	goto yystack /* stack new state and value */
}
